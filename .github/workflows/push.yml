name: push
on:
  push:
    branches:
      - master
      - main
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-latest
    name: build
    steps:
      - name: set repo name
        shell: bash
        env:
          QUAY_REGISTRY: ${{ secrets.QUAY_REGISTRY }}
        run: |
          DEFAULT_QUAY_REGISTRY=${{ github.repository_owner }}/$(basename $GITHUB_REPOSITORY)
          echo "REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)" |tee -a $GITHUB_ENV
          echo "QUAY_REGISTRY=${QUAY_REGISTRY:-$DEFAULT_QUAY_REGISTRY}" |tee -a $GITHUB_ENV

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Download operator sdk
        shell: bash
        env:
          RELEASE_VERSION: v1.9.0
        run: |
          curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk_linux_amd64
          chmod +x operator-sdk_linux_amd64
          mkdir ${HOME}/bin
          mv operator-sdk_linux_amd64 ${HOME}/bin/operator-sdk
          echo "${HOME}/bin" |tee -a $GITHUB_PATH

      - name: Install yq
        shell: bash
        env:
          YQ_VERSION: 3.4.0
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Download compatible Helm version
        shell: bash
        env:
          HELM_VERSION: v3.3.0
        run: |
          curl -sSL https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar vxz \
              && sudo mv -v linux-amd64/helm /usr/local/bin/helm \
              && rm -vrf linux-amd64

      - name: Get the version for tags
        id: get_version1
        if: "startsWith(github.ref, 'refs/tags')"
        shell: bash
        run: |
          echo "OPERATOR_IMAGE_TAG=${GITHUB_REF/refs\/tags\//}" |tee -a $GITHUB_ENV
          echo "BUNDLE_IMAGE_TAG=${GITHUB_REF/refs\/tags\//}" |tee -a $GITHUB_ENV
          export TAG=${GITHUB_REF/refs\/tags\//}
          echo "BUNDLE_VERSION=${TAG:1}" |tee -a $GITHUB_ENV
          export SEMVER_COMPLIANT=$(echo ${TAG:1} | egrep '^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(?:-((?:0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$')
          if [ -z "$SEMVER_COMPLIANT" ]; then   echo "invalid semver tag ${GITHUB_REF/refs\/tags\//}"; exit 1; fi
      - name: Get most recent tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        if: "! startsWith(github.ref, 'refs/tags')"
        with:
          semver_only: true

      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        if: "! startsWith(github.ref, 'refs/tags')"
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: patch

      - name: Get the version for push
        id: get_version2
        if: "! startsWith(github.ref, 'refs/tags')"
        shell: bash
        run: |
          export BUNDLE_VERSION=${{ steps.bump-semver.outputs.new_version }}
          echo "OPERATOR_IMAGE_TAG=latest" |tee -a $GITHUB_ENV
          echo "BUNDLE_IMAGE_TAG=latest" |tee -a $GITHUB_ENV
          echo "BUNDLE_VERSION=${BUNDLE_VERSION:1}" |tee -a $GITHUB_ENV

      - name: build code
        run: make
        shell: bash

      - name: build chart
        shell: bash
        run: make helmchart VERSION=${BUNDLE_VERSION} IMG=quay.io/${QUAY_REGISTRY}:${OPERATOR_IMAGE_TAG}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: quay.io/${{ env.QUAY_REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: "Build and Push Operator Image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/ppc64le
          push: true
          tags: "quay.io/${{ env.QUAY_REGISTRY }}:latest,quay.io/${{ env.QUAY_REGISTRY }}:${{ env.OPERATOR_IMAGE_TAG }}"

  release-github:
    name: GitHub Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags')"
    needs: ["build"]
    steps:
      - name: set repo name
        shell: bash
        run: |
          echo "REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)" |tee -a $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" |tee -a $GITHUB_ENV
      - name: Generate Changelog
        run: |
          LATEST_TAG=$(git tag --sort=creatordate | sed '$!d')
          PREVIOUS_TAG=$(git tag --sort=creatordate | sed 'x;$!d')
          if [ -z "${PREVIOUS_TAG}" ]; then
            REV_RANGE=${LATEST_TAG}
          else
            REV_RANGE=${PREVIOUS_TAG}..${LATEST_TAG}
          fi
          git log --pretty=format:"- %s %H (%aN)" --no-merges ${REV_RANGE} > ${VERSION}-CHANGELOG.txt
          cat ${VERSION}-CHANGELOG.txt
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ env.VERSION }}-CHANGELOG.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
